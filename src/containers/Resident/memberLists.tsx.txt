import { EllipsisOutlined , PlusOutlined } from '@ant-design/icons' ;      
import type { ActionType , ProColumns } from '@ant-design/pro-components' ;       
import { ProTable , TableDropdown } from '@ant-design/pro-components' ;      
import { Button , Dropdown , Menu , Space , Tag } from 'antd' ;         
import { useRef } from 'react' ;   
import request from 'umi-request' ;   

type GithubIssueItem = {   
  url : string ; 
  id : number ; 
  number : number ; 
  title : string ; 
  labels : { 
    name : string ; 
    color : string ; 
  } [ ] ;
  state : string ; 
  comments : number ; 
  created_at : string ; 
  updated_at : string ; 
  closed_at ? : string ; 
} ;

const columns : ProColumns < GithubIssueItem > [ ] = [   
  {
    dataIndex : 'index' , 
    valueType : 'indexBorder' , 
    width : 48 , 
  } ,
  {
    title : 'title' , 
    dataIndex : 'title' , 
    copyable : true , 
    ellipsis : true , 
    tip : 'The title will automatically shrink if it is too long' , 
    formItemProps : { 
      rules : [ 
        {
          required : true , 
          message : 'This item is required' , 
        } ,
      ] ,
    } ,
  } ,
  {
    disable : true , 
    title : 'status' , 
    dataIndex : 'state' , 
    filters : true , 
    onFilter : true , 
    ellipsis : true , 
    valueType : 'select' , 
    valueEnum : { 
      all : { text : 'extra long' . repeat ( 50 ) } ,   
      open : { 
        text : 'unresolved' , 
        status : 'Error' , 
      } ,
      closed : { 
        text : 'resolved' , 
        status : 'Success' , 
        disabled : true , 
      } ,
      processing : { 
        text : 'solving' , 
        status : 'Processing' , 
      } ,
    } ,
  } ,
  {
    disable : true , 
    title : 'label' , 
    dataIndex : 'labels' , 
    search : false , 
    renderFormItem : ( _ , { defaultRender } ) => {    
      return defaultRender ( _ ) ; 
    } ,
    render : ( _ , record ) => (   
      < Space >
        { record . labels . map ( ( { name , color } ) => (  
          < Tag color = { color } key = { name } >  
            { name }
          </ Tag >
        ) ) }
      </ Space >
    ) ,
  } ,
  {
    title : 'creation time' , 
    key : 'showTime' , 
    dataIndex : 'created_at' , 
    valueType : 'dateTime' , 
    sorter : true , 
    hideInSearch : true , 
  } ,
  {
    title : 'creation time' , 
    dataIndex : 'created_at' , 
    valueType : 'dateRange' , 
    hideInTable : true , 
    search : { 
      transform : ( value ) => {   
        return { 
          startTime : value [ 0 ] ,
          endTime : value [ 1 ] ,
        } ;
      } ,
    } ,
  } ,
  {
    title : 'Operation' , 
    valueType : 'option' , 
    key : 'option' , 
    render : ( text , record , _ , action ) => [   
      < a
        key = " editable "
        onClick = { ( ) => {  
          action ?.startEditable ?. ( record . id );
        } }
      >
        edit
      </ a > ,
      < a href = { record . url } target = " _blank " rel = " noopener noreferrer " key = " view " >    
        Check
      </ a > ,
      < TableDropdown
        key = " actionGroup "
        onSelect = { ( ) => action ?. reload ( ) } 
        menus = { [
          { key : 'copy' , name : 'copy' } ,   
          { key : 'delete' , name : 'delete' } ,   
        ] }
      /> ,
    ] ,
  } ,
] ;

const menu = ( 
  < Menu >
    < Menu.Item key = " 1 " > 1st item </ Menu.Item > 
    < Menu.Item key = " 2 " > 2nd item </ Menu.Item > 
    < Menu.Item key = " 3 " > 3rd item </ Menu.Item > 
  </ Menu >
) ;

export default ( ) => {    
  const actionRef = useRef < ActionType > ( ) ; 
  return ( 
    < ProTable < GithubIssueItem >
      columns = { columns }
      actionRef = { actionRef }
      cardBordered
      request = { async ( params = { } , sort , filter ) => {    
        console.log ( sort , filter ) ;
        return request < { 
          data : GithubIssueItem [ ] ;
        } > ( 'https://proapi.azurewebsites.net/github/issues' , { 
          params ,
        } ) ;
      } }
      editable = { {
        type : 'multiple' , 
      } }
      columnsState = { {
        persistenceKey : 'pro-table-singe-demos' , 
        persistenceType : 'localStorage' , 
        onChange ( value ) { 
          console . log ( 'value: ' , value ) ;
        } ,
      } }
      rowKey = "id"
      search = { {
        labelWidth : 'auto' , 
      } }
      options = { {
        setting : { 
          listsHeight : 400 , 
        } ,
      } }
      form = { {
        // Since the transform is configured, the submitted participation is different from the definition and needs to be transformed here
        syncToUrl : ( values ​​, type ) => {   
          if ( type === 'get' ) {   
            return { 
              ... values ​​,
              created_at : [ values ​​. startTime , values ​​. endTime ] , 
            } ;
          }
          return values ​​;
        } ,
      } }
      pagination = { {
        pageSize : 5 , 
        onChange : ( page ) => console . log ( page ) ,   
      } }
      dateFormatter = "string"
      headerTitle = "Advanced Form"
      toolBarRender = { ( ) => [  
        < Button key = " button " icon = { < PlusOutlined /> } type = "primary" >    
          new
        </ Button > ,
        < Dropdown key = " menu " overlay = { menu } >  
          < Button >
            < EllipsisOutlined /> 
          </ Button >
        </ Dropdown > ,
      ] }
    / >
  ) ;
} ;

